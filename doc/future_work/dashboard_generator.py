#!/usr/bin/env python3
"""
Generate monitoring dashboards for the Reversible Meta-Synthesis service.
"""

import os
import logging
import json
import yaml
import argparse
import requests
from typing import Dict, List, Any, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('/var/log/dashboard-generator.log')
    ]
)
logger = logging.getLogger("dashboard-generator")

class DashboardGenerator:
    """
    Generate Grafana dashboards for the Reversible Meta-Synthesis service.
    """
    
    def __init__(self, config_file: str):
        """
        Initialize the dashboard generator
        
        Args:
            config_file: Path to the configuration file
        """
        # Load configuration
        with open(config_file, 'r') as f:
            self.config = yaml.safe_load(f)
        
        # Validate configuration
        self._validate_config()
    
    def _validate_config(self):
        """Validate the configuration"""
        required_keys = [
            'grafana.url',
            'grafana.api_key',
            'dashboards.output_dir'
        ]
        
        for key in required_keys:
            parts = key.split('.')
            config = self.config
            for part in parts:
                if part not in config:
                    raise ValueError(f"Missing required configuration key: {key}")
                config = config[part]
    
    def generate_dashboards(self):
        """Generate all dashboards"""
        logger.info("Generating dashboards")
        
        # Create output directory if it doesn't exist
        output_dir = self.config['dashboards']['output_dir']
        os.makedirs(output_dir, exist_ok=True)
        
        # Generate each dashboard
        for dashboard_config in self.config['dashboards'].get('definitions', []):
            self._generate_dashboard(dashboard_config, output_dir)
        
        logger.info(f"Generated {len(self.config['dashboards'].get('definitions', []))} dashboards in {output_dir}")
    
    def _generate_dashboard(self, dashboard_config: Dict[str, Any], output_dir: str):
        """
        Generate a single dashboard
        
        Args:
            dashboard_config: Dashboard configuration
            output_dir: Output directory
        """
        title = dashboard_config.get('title')
        if not title:
            logger.warning("Dashboard configuration missing title, skipping")
            return
        
        logger.info(f"Generating dashboard: {title}")
        
        # Create dashboard JSON
        dashboard = {
            "dashboard": {
                "id": None,
                "uid": dashboard_config.get('uid', None),
                "title": title,
                "description": dashboard_config.get('description', ''),
                "tags": dashboard_config.get('tags', []),
                "timezone": "browser",
                "editable": True,
                "panels": self._generate_panels(dashboard_config.get('panels', [])),
                "time": {
                    "from": "now-6h",
                    "to": "now"
                },
                "refresh": "1m",
                "schemaVersion": 30,
                "version": 1
            },
            "overwrite": True,
            "message": "Dashboard generated by dashboard-generator.py"
        }
        
        # Add folder if specified
        folder = dashboard_config.get('folder')
        if folder:
            dashboard["folderTitle"] = folder
        
        # Save to file
        safe_title = title.lower().replace(' ', '_').replace('-', '_')
        filename = f"{safe_title}.json"
        file_path = os.path.join(output_dir, filename)
        
        with open(file_path, 'w') as f:
            json.dump(dashboard, f, indent=2)
        
        logger.info(f"Saved dashboard to {file_path}")
        
        # Upload to Grafana if configured
        if self.config['grafana'].get('auto_upload', False):
            self._upload_dashboard(dashboard)
    
    def _generate_panels(self, panel_configs: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Generate panels for a dashboard
        
        Args:
            panel_configs: Panel configurations
        
        Returns:
            List of panel definitions
        """
        panels = []
        panel_id = 1
        
        for panel_config in panel_configs:
            panel_type = panel_config.get('type', 'graph')
            title = panel_config.get('title', f'Panel {panel_id}')
            
            # Basic panel properties
            panel = {
                "id": panel_id,
                "title": title,
                "type": panel_type,
                "gridPos": panel_config.get('gridPos', {
                    "h": 8,
                    "w": 12,
                    "x": 0,
                    "y": 0
                })
            }
            
            # Add panel-type specific properties
            if panel_type == 'graph':
                panel.update(self._generate_graph_panel(panel_config))
            elif panel_type == 'gauge':
                panel.update(self._generate_gauge_panel(panel_config))
            elif panel_type == 'stat':
                panel.update(self._generate_stat_panel(panel_config))
            elif panel_type == 'table':
                panel.update(self._generate_table_panel(panel_config))
            elif panel_type == 'heatmap':
                panel.update(self._generate_heatmap_panel(panel_config))
            elif panel_type == 'text':
                panel.update(self._generate_text_panel(panel_config))
            else:
                logger.warning(f"Unknown panel type: {panel_type}, using default graph panel")
                panel.update(self._generate_graph_panel(panel_config))
            
            panels.append(panel)
            panel_id += 1
        
        return panels
    
    def _generate_graph_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a graph panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Graph panel definition
        """
        return {
            "datasource": panel_config.get('datasource', 'Prometheus'),
            "targets": self._generate_targets(panel_config.get('targets', [])),
            "fieldConfig": {
                "defaults": {
                    "color": {
                        "mode": "palette-classic"
                    },
                    "custom": {
                        "axisLabel": panel_config.get('yAxis', {}).get('label', ''),
                        "axisPlacement": "auto",
                        "barAlignment": 0,
                        "drawStyle": "line",
                        "fillOpacity": panel_config.get('fillOpacity', 10),
                        "gradientMode": "none",
                        "hideFrom": {
                            "legend": False,
                            "tooltip": False,
                            "viz": False
                        },
                        "lineInterpolation": "linear",
                        "lineWidth": panel_config.get('lineWidth', 1),
                        "pointSize": panel_config.get('pointSize', 5),
                        "scaleDistribution": {
                            "type": "linear"
                        },
                        "showPoints": "never",
                        "spanNulls": True,
                        "stacking": {
                            "group": "A",
                            "mode": panel_config.get('stacking', 'none')
                        },
                        "thresholdsStyle": {
                            "mode": "off"
                        }
                    },
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {
                                "color": "green",
                                "value": None
                            }
                        ]
                    },
                    "unit": panel_config.get('unit', 'none')
                },
                "overrides": []
            },
            "options": {
                "legend": {
                    "calcs": [],
                    "displayMode": "list",
                    "placement": "bottom",
                    "showLegend": True
                },
                "tooltip": {
                    "mode": "single",
                    "sort": "none"
                }
            }
        }
    
    def _generate_gauge_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a gauge panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Gauge panel definition
        """
        thresholds = panel_config.get('thresholds', [
            {"color": "green", "value": None},
            {"color": "orange", "value": 70},
            {"color": "red", "value": 90}
        ])
        
        return {
            "datasource": panel_config.get('datasource', 'Prometheus'),
            "targets": self._generate_targets(panel_config.get('targets', [])),
            "fieldConfig": {
                "defaults": {
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": thresholds
                    },
                    "color": {
                        "mode": "thresholds"
                    },
                    "min": panel_config.get('min', 0),
                    "max": panel_config.get('max', 100),
                    "unit": panel_config.get('unit', 'none')
                },
                "overrides": []
            },
            "options": {
                "reduceOptions": {
                    "values": False,
                    "calcs": ["lastNotNull"],
                    "fields": ""
                },
                "orientation": "auto",
                "showThresholdLabels": panel_config.get('showThresholdLabels', False),
                "showThresholdMarkers": panel_config.get('showThresholdMarkers', True)
            }
        }
    
    def _generate_stat_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a stat panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Stat panel definition
        """
        return {
            "datasource": panel_config.get('datasource', 'Prometheus'),
            "targets": self._generate_targets(panel_config.get('targets', [])),
            "fieldConfig": {
                "defaults": {
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": panel_config.get('thresholds', [
                            {"color": "green", "value": None}
                        ])
                    },
                    "color": {
                        "mode": "thresholds"
                    },
                    "unit": panel_config.get('unit', 'none')
                },
                "overrides": []
            },
            "options": {
                "reduceOptions": {
                    "values": False,
                    "calcs": [panel_config.get('calc', 'lastNotNull')],
                    "fields": ""
                },
                "orientation": "auto",
                "textMode": panel_config.get('textMode', 'auto'),
                "colorMode": panel_config.get('colorMode', 'value'),
                "graphMode": panel_config.get('graphMode', 'area'),
                "justifyMode": "auto"
            }
        }
    
    def _generate_table_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a table panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Table panel definition
        """
        return {
            "datasource": panel_config.get('datasource', 'Prometheus'),
            "targets": self._generate_targets(panel_config.get('targets', [])),
            "fieldConfig": {
                "defaults": {
                    "mappings": [],
                    "thresholds": {
                        "mode": "absolute",
                        "steps": [
                            {"color": "green", "value": None}
                        ]
                    },
                    "color": {
                        "mode": "thresholds"
                    }
                },
                "overrides": []
            },
            "options": {
                "showHeader": True,
                "footer": {
                    "show": False,
                    "reducer": ["sum"],
                    "countRows": False
                }
            }
        }


def _generate_heatmap_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a heatmap panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Heatmap panel definition
        """
        return {
            "datasource": panel_config.get('datasource', 'Prometheus'),
            "targets": self._generate_targets(panel_config.get('targets', [])),
            "fieldConfig": {
                "defaults": {
                    "custom": {
                        "hideFrom": {
                            "legend": False,
                            "tooltip": False,
                            "viz": False
                        }
                    }
                },
                "overrides": []
            },
            "options": {
                "calculate": True,
                "calculation": {
                    "xBuckets": panel_config.get('xBuckets', None),
                    "yBuckets": panel_config.get('yBuckets', None)
                },
                "cellGap": 1,
                "cellSize": 10,
                "cellValues": {},
                "color": {
                    "exponent": 0.5,
                    "fill": "dark-orange",
                    "mode": "scheme",
                    "reverse": False,
                    "scale": "exponential",
                    "scheme": panel_config.get('colorScheme', 'Oranges'),
                    "steps": 64
                },
                "yAxis": {
                    "axisPlacement": "left",
                    "reverse": False,
                    "unit": panel_config.get('yAxisUnit', 'none')
                },
                "tooltip": {
                    "show": True
                }
            }
        }
    
    def _generate_text_panel(self, panel_config: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a text panel
        
        Args:
            panel_config: Panel configuration
        
        Returns:
            Text panel definition
        """
        return {
            "options": {
                "content": panel_config.get('content', ''),
                "mode": panel_config.get('mode', 'markdown')
            }
        }
    
    def _generate_targets(self, target_configs: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Generate targets for a panel
        
        Args:
            target_configs: Target configurations
        
        Returns:
            List of target definitions
        """
        targets = []
        
        for i, target_config in enumerate(target_configs):
            if 'expr' not in target_config:
                logger.warning(f"Target configuration missing expr, skipping")
                continue
            
            target = {
                "expr": target_config['expr'],
                "refId": target_config.get('refId', chr(65 + i)),
                "instant": target_config.get('instant', False),
                "legendFormat": target_config.get('legend', ''),
                "interval": target_config.get('interval', '')
            }
            
            targets.append(target)
        
        return targets
    
    def upload_dashboards(self):
        """Upload all generated dashboards to Grafana"""
        logger.info("Uploading dashboards to Grafana")
        
        output_dir = self.config['dashboards']['output_dir']
        
        # Get list of dashboard files
        dashboard_files = [f for f in os.listdir(output_dir) if f.endswith('.json')]
        
        # Upload each dashboard
        for filename in dashboard_files:
            file_path = os.path.join(output_dir, filename)
            self._upload_dashboard_file(file_path)
        
        logger.info(f"Uploaded {len(dashboard_files)} dashboards to Grafana")
    
    def _upload_dashboard(self, dashboard: Dict[str, Any]):
        """
        Upload a dashboard to Grafana
        
        Args:
            dashboard: Dashboard definition
        """
        try:
            grafana_url = self.config['grafana']['url']
            api_key = self.config['grafana']['api_key']
            
            url = f"{grafana_url}/api/dashboards/db"
            
            headers = {
                'Authorization': f"Bearer {api_key}",
                'Content-Type': 'application/json'
            }
            
            response = requests.post(url, json=dashboard, headers=headers)
            
            if response.status_code not in [200, 201]:
                logger.warning(f"Failed to upload dashboard: {response.text}")
            else:
                result = response.json()
                dashboard_url = f"{grafana_url}{result['url']}"
                logger.info(f"Dashboard uploaded successfully: {dashboard_url}")
        
        except Exception as e:
            logger.error(f"Error uploading dashboard: {e}", exc_info=True)
    
    def _upload_dashboard_file(self, file_path: str):
        """
        Upload a dashboard file to Grafana
        
        Args:
            file_path: Path to dashboard file
        """
        try:
            with open(file_path, 'r') as f:
                dashboard = json.load(f)
            
            self._upload_dashboard(dashboard)
        
        except Exception as e:
            logger.error(f"Error uploading dashboard file {file_path}: {e}", exc_info=True)

# Example usage
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate dashboards for Reversible Meta-Synthesis service')
    parser.add_argument('--config', type=str, default='dashboard_config.yaml', help='Path to configuration file')
    parser.add_argument('--action', type=str, choices=['generate', 'upload', 'both'], default='both', help='Action to perform')
    args = parser.parse_args()
    
    generator = DashboardGenerator(args.config)
    
    if args.action in ['generate', 'both']:
        generator.generate_dashboards()
    
    if args.action in ['upload', 'both']:
        generator.upload_dashboards()
